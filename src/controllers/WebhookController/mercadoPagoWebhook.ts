import { Request, Response } from 'express';
import EstablecimientoService from '../../services/EstablecimientoService/establecimientoService';
import { getSubscriptionStatus, mercadoPagoConfig } from '../../config/mercadopago-config';

const mercadoPagoWebhook = async (req: Request, res: Response) => {
  try {
    console.log('üîî Webhook recibido:', {
      headers: req.headers,
      body: req.body,
      query: req.query
    });

    const { type, data, action } = req.body;

    // Solo procesar notificaciones de suscripci√≥n (preapproval)
    if (type === 'preapproval') {
      const preapprovalId = data?.id;
      
      if (!preapprovalId) {
        console.error('‚ùå Webhook: preapproval_id no encontrado en la notificaci√≥n');
        return res.status(400).send('Bad Request: preapproval_id missing');
      }

      console.log('üîç Procesando notificaci√≥n de preapproval:', {
        id: preapprovalId,
        action: action
      });

      try {
        // Consultar el estado de la suscripci√≥n en Mercado Pago usando el SDK
        const preapproval = await getSubscriptionStatus(preapprovalId);
        
        console.log('üìä Estado de suscripci√≥n obtenido:', {
          id: preapproval.body?.id,
          status: preapproval.body?.status,
          payer_email: preapproval.body?.payer_email
        });

        // Procesar seg√∫n el estado
        if (preapproval.body) {
          const status = preapproval.body.status;
          
          switch (status) {
            case 'authorized':
            case 'active':
              console.log('‚úÖ Suscripci√≥n activada, actualizando establecimiento...');
              await EstablecimientoService.activarMembresiaPorPreapproval(preapprovalId);
              break;
              
            case 'pending':
              console.log('‚è≥ Suscripci√≥n pendiente, manteniendo estado actual');
              break;
              
            case 'cancelled':
              console.log('‚ùå Suscripci√≥n cancelada, desactivando membres√≠a...');
              // Necesitamos obtener el ID del establecimiento por preapproval_id
              // Por ahora, solo log el evento. Se puede mejorar m√°s adelante
              console.log('Nota: Implementar desactivaci√≥n de membres√≠a por preapproval_id');
              break;
              
            case 'paused':
              console.log('‚è∏Ô∏è Suscripci√≥n pausada');
              break;
              
            default:
              console.log('‚ùì Estado de suscripci√≥n desconocido:', status);
          }
        }

      } catch (mpError) {
        console.error('‚ùå Error consultando Mercado Pago:', mpError);
        // No retornar error para evitar reenv√≠os del webhook
      }
    } else {
      console.log('‚ÑπÔ∏è Webhook ignorado, tipo no es preapproval:', type);
    }

    // Siempre responder 200 para evitar reenv√≠os
    res.status(200).send('OK');
    
  } catch (error) {
    console.error('‚ùå Error general en webhook Mercado Pago:', error);
    // A√∫n as√≠ responder 200 para evitar reenv√≠os infinitos
    res.status(200).send('OK');
  }
};

export default mercadoPagoWebhook; 