import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from '@google/generative-ai';

const API_KEY = process.env.GEMINI_API_KEY;

if (!API_KEY) {
  throw new Error('GEMINI_API_KEY no est√° configurada en las variables de entorno');
}

const genAI = new GoogleGenerativeAI(API_KEY);

// Configuraci√≥n del modelo optimizada para QuindiFood
export const geminiModel = genAI.getGenerativeModel({ 
  model: "gemini-2.0-flash",
  generationConfig: {
    temperature: 0.7, // M√°s creativo para respuestas naturales
    topK: 40,
    topP: 0.9,
    maxOutputTokens: 2000, // M√°s espacio para respuestas detalladas
  },
  safetySettings: [
    {
      category: HarmCategory.HARM_CATEGORY_HARASSMENT,
      threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,
    },
    {
      category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, 
      threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,
    },
    {
      category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
      threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,
    },
    {
      category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
      threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,
    },
  ],
});

// Contexto s√∫per espec√≠fico de QuindiFood
export const QUINDIFOOD_CONTEXT = `
Eres QuindiBot ü§ñ, el asistente gastron√≥mico m√°s inteligente del Quind√≠o. Tu misi√≥n es ayudar a encontrar la comida perfecta.

üéØ TU SUPERPODER: Conoces TODOS los productos y establecimientos de QuindiFood en tiempo real.

üìä DATOS DISPONIBLES EN TIEMPO REAL:
- Productos con precios exactos, descripciones, calificaciones
- Establecimientos con ubicaciones, categor√≠as, calificaciones
- Historial de b√∫squedas y preferencias de usuarios
- Comentarios y rese√±as reales de clientes

üîç CUANDO EL USUARIO PREGUNTE POR COMIDA:
1. SIEMPRE busca en los datos reales proporcionados
2. Si hay productos que coinciden, menciona nombres exactos, precios y establecimientos
3. Si NO hay productos exactos, recomienda alternativas similares de los datos reales
4. NUNCA inventes productos, precios o establecimientos

‚úÖ EJEMPLOS DE RESPUESTAS INTELIGENTES:
- Usuario: "Quiero sushi" ‚Üí Si hay sushi real: "¬°Genial! Encontr√© Sushi Roll de Salm√≥n en Sushi Master por $28.500"
- Usuario: "Quiero sushi" ‚Üí Si NO hay sushi: "No tengo sushi espec√≠ficamente, pero tengo Gohan de Salm√≥n en Sushi Express por $23.000, que es parecido"
- Usuario: "Algo barato" ‚Üí Muestra los productos m√°s econ√≥micos de los datos reales
- Usuario: "Postres" ‚Üí Muestra helados, dulces, etc. de los datos reales

üö´ NUNCA HAGAS ESTO:
- Inventar productos que no est√°n en los datos
- Dar precios inventados
- Mencionar establecimientos que no existen en los datos
- Ser gen√©rico cuando tienes datos espec√≠ficos

üé® PERSONALIDAD:
- Entusiasta y conocedor de la gastronom√≠a quindiamana
- Espec√≠fico con nombres, precios y ubicaciones
- Conversacional pero preciso
- Menciona calificaciones cuando las tengas
`;

// Funci√≥n principal para generar contenido optimizada
export const generateAIResponse = async (
  prompt: string, 
  userRole: string, 
  conversationHistory: any[] = []
): Promise<string> => {
  try {
    // Construir historial de conversaci√≥n
    let conversationContext = '';
    if (conversationHistory.length > 0) {
      conversationContext = '\nHISTORIAL RECIENTE:\n' + 
        conversationHistory.slice(-2).map(msg => 
          `Usuario: ${msg.user_message}\nQuindiBot: ${msg.ai_response}`
        ).join('\n') + '\n';
    }

    // Prompt optimizado para QuindiFood
    const structuredPrompt = `
${QUINDIFOOD_CONTEXT}

${conversationContext}

INFORMACI√ìN DE B√öSQUEDA ACTUAL:
${prompt}

INSTRUCCIONES ESPEC√çFICAS:
- Analiza los datos de productos y establecimientos proporcionados
- Si encuentras productos que coinciden con la b√∫squeda, menci√≥nelos espec√≠ficamente
- Incluye precios exactos, nombres de establecimientos y calificaciones si est√°n disponibles
- Si no hay coincidencias exactas, sugiere alternativas similares de los datos reales
- S√© conversacional pero preciso
- M√°ximo 300 palabras

RESPUESTA de QuindiBot:`;

    const result = await geminiModel.generateContent(structuredPrompt);
    const response = await result.response;
    let text = response.text();

    // Limpiar y mejorar la respuesta
    const cleanResponse = optimizeResponse(text);
    
    return cleanResponse;
  } catch (error) {
    console.error('Error al generar contenido con Gemini:', error);
    
    // Respuesta de fallback m√°s inteligente
    if (prompt.includes('PRODUCTOS ENCONTRADOS:') || prompt.includes('ESTABLECIMIENTOS ENCONTRADOS:')) {
      return "¬°Perfecto! He encontrado varias opciones que podr√≠an interesarte. D√©jame mostrarte los mejores resultados basados en tu b√∫squeda. ¬øTe gustar√≠a que profundice en alguna opci√≥n espec√≠fica?";
    }
    
    return 'Lo siento, estoy teniendo problemas t√©cnicos en este momento. ¬øPodr√≠as intentar reformular tu consulta? Estoy aqu√≠ para ayudarte a encontrar la mejor comida del Quind√≠o.';
  }
};

// Funci√≥n para optimizar respuestas
const optimizeResponse = (response: string): string => {
  // Remover texto redundante
  let cleanResponse = response
    .replace(/^(QuindiBot:|ü§ñ)/i, '')
    .replace(/\*\*/g, '')
    .trim();
  
  // Asegurar que empiece naturalmente
  if (!cleanResponse.match(/^[¬°!Hola|Perfecto|Genial|Claro|Por supuesto]/i)) {
    if (cleanResponse.toLowerCase().includes('encontr')) {
      cleanResponse = '¬°Perfecto! ' + cleanResponse;
    } else if (cleanResponse.toLowerCase().includes('recomien')) {
      cleanResponse = '¬°Claro! ' + cleanResponse;
    } else {
      cleanResponse = '¬°Hola! ' + cleanResponse;
    }
  }
  
  // Limpiar posible informaci√≥n sensible (por seguridad)
  const sensitivePatterns = [
    /database|sql|query|admin|password|token/gi,
  ];
  
  sensitivePatterns.forEach(pattern => {
    cleanResponse = cleanResponse.replace(pattern, '[INFORMACI√ìN T√âCNICA]');
  });
  
  return cleanResponse.trim();
};

// Funci√≥n espec√≠fica para b√∫squedas con datos reales
export const generateResponseWithRealData = async (
  userQuery: string,
  productos: any[] = [],
  establecimientos: any[] = [],
  analisisSemantico: any = {},
  conversationHistory: any[] = []
): Promise<string> => {
  try {
    // Construir contexto con datos reales
    const contextWithData = `
CONSULTA DEL USUARIO: "${userQuery}"

AN√ÅLISIS SEM√ÅNTICO:
- Intenci√≥n detectada: ${analisisSemantico.intencion_detectada || 'b√∫squeda general'}
- Palabras clave: ${analisisSemantico.palabras_clave?.join(', ') || 'ninguna'}
- Nivel de confianza: ${analisisSemantico.nivel_confianza || 0}

PRODUCTOS ENCONTRADOS EN LA BASE DE DATOS (${productos.length} total):
${productos.slice(0, 8).map((p: any, i: number) => {
  const calificacion = p.calificacion_promedio ? `‚≠ê${parseFloat(p.calificacion_promedio).toFixed(1)}` : '';
  return `${i+1}. üçΩÔ∏è "${p.nombre}" - $${p.precio} en ${p.nombre_establecimiento} ${calificacion}${p.descripcion ? ` - ${p.descripcion.substring(0, 80)}` : ''}`;
}).join('\n')}

ESTABLECIMIENTOS ENCONTRADOS (${establecimientos.length} total):
${establecimientos.slice(0, 5).map((e: any, i: number) => {
  const calificacion = e.calificacion_promedio ? `‚≠ê${parseFloat(e.calificacion_promedio).toFixed(1)}` : '';
  const productos = e.total_productos ? ` (${e.total_productos} productos)` : '';
  return `${i+1}. üè™ "${e.nombre_establecimiento}" - ${e.categoria} ${calificacion}${productos} en ${e.ubicacion}`;
}).join('\n')}

INSTRUCCIONES PARA RESPONDER:
1. Si hay productos relevantes, menciona los mejores 2-3 con nombres exactos y precios
2. Si hay establecimientos relevantes, menciona 1-2 con calificaciones
3. S√© espec√≠fico y √∫til, no gen√©rico
4. Si no hay resultados exactos, sugiere alternativas de los datos disponibles
5. Menciona ubicaciones si son relevantes
6. S√© conversacional y entusiasta

Responde como QuindiBot, el asistente gastron√≥mico experto:`;

    const result = await geminiModel.generateContent(contextWithData);
    const response = await result.response;
    let text = response.text();

    return optimizeResponse(text);
    
  } catch (error) {
    console.error('Error generando respuesta con datos reales:', error);
    
    // Fallback con datos disponibles
    if (productos.length > 0) {
      const mejorProducto = productos[0];
      return `¬°Perfecto! Encontr√© "${mejorProducto.nombre}" por $${mejorProducto.precio} en ${mejorProducto.nombre_establecimiento}. ${productos.length > 1 ? `Tambi√©n tengo ${productos.length - 1} opciones m√°s.` : ''} ¬øTe gustar√≠a m√°s detalles sobre alguna opci√≥n?`;
    }
    
    if (establecimientos.length > 0) {
      const mejorEstablecimiento = establecimientos[0];
      return `¬°Genial! Te recomiendo ${mejorEstablecimiento.nombre_establecimiento}, que es ${mejorEstablecimiento.categoria} y est√° ubicado en ${mejorEstablecimiento.ubicacion}. ¬øTe gustar√≠a ver qu√© productos tienen disponibles?`;
    }
    
    return 'No encontr√© resultados exactos para tu b√∫squeda, pero puedo ayudarte a explorar otras opciones gastron√≥micas en QuindiFood. ¬øQu√© tipo de comida prefieres?';
  }
};

export default geminiModel;